# Multi-stage build para optimizar el tamaño de la imagen final
FROM node:20-alpine AS builder

# Instalar dependencias necesarias para el build
RUN apk add --no-cache python3 make g++

WORKDIR /app

# Copiar archivos de configuración
COPY package*.json ./
COPY tsconfig*.json ./
COPY nest-cli.json ./

# Instalar todas las dependencias (incluyendo devDependencies para el build)
RUN npm ci --silent

# Copiar código fuente
COPY src/ ./src/

# Build de la aplicación
RUN npm run build

# Imagen final para producción
FROM node:20-alpine AS production

# Crear usuario no-root para seguridad
RUN addgroup -g 1001 -S nodejs && \
    adduser -S myboard -u 1001

# Instalar herramientas necesarias para healthcheck
RUN apk add --no-cache wget curl dumb-init

WORKDIR /app

# Copiar solo las dependencias de producción
COPY package*.json ./
RUN npm ci --only=production --silent && npm cache clean --force

# Copiar el build compilado desde la etapa anterior
COPY --from=builder /app/dist ./dist

# Cambiar permisos al usuario no-root
RUN chown -R myboard:nodejs /app

# Cambiar a usuario no-root
USER myboard

# Exponer puerto
EXPOSE 3001

# Variables de entorno de producción
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=256"

# Usar dumb-init para manejar señales correctamente
ENTRYPOINT ["dumb-init", "--"]

# Comando de inicio
CMD ["node", "dist/main"]

# Healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3001/auth/test || exit 1